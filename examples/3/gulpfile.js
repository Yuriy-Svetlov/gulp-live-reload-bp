
const 
  gulp = require('gulp'),
  LiveReload = require("gulp-live-reload-bp"),
  plumber = require('gulp-plumber'),
  gulpSass = require('gulp-sass')(require('sass')),
  postcss = require('gulp-postcss'),
  cssnano = require('cssnano'),
  minifyJS = require('gulp-uglify-es').default,
  htmlmin = require('gulp-htmlmin'),
  webServer = require('./web-server');

const 
  cssMain1Watch = 'src/scss/main-1/*.scss',
  cssMain1Src = ['src/scss/main-1/*.scss'],
  cssMain1Dest = 'dest/css';

const 
  cssMain2Watch = 'src/scss/main-2/*.scss',
  cssMain2Src = ['src/scss/main-2/*.scss'],
  cssMain2Dest = 'dest/css';

const 
  htmlWatch = 'src/*.html',
  htmlSrc = ['src/*.html'],
  htmlDest = 'dest';

const 
  jsWatch = 'src/js/*.js',
  jsSrc = ['src/js/*.js'],
  jsDest = 'dest/js';

const 
  liveReload = new LiveReload({
    host: '127.0.0.1', 
    port: '8080'
  });


function cssMain1() {
  return gulp.src(cssMain1Src)
  .pipe(plumber())        
  .pipe(gulpSass().on('error', gulpSass.logError))   
  .pipe(postcss([
    cssnano({zindex: false, reduceIdents: false})
  ]))     
  .pipe(liveReload.reloadPage({
    action: 'page_reload',
    partial_reload: {
      tag: 'link',    
      href: '/css/1.css'
    }      
  }))
  .pipe(gulp.dest(cssMain1Dest));
}


function cssMain2() {
  return gulp.src(cssMain2Src)
  .pipe(plumber())        
  .pipe(gulpSass().on('error', gulpSass.logError))   
  .pipe(postcss([
    cssnano({zindex: false, reduceIdents: false})
  ]))     
  .pipe(liveReload.reloadPage({
    action: 'page_reload',
    partial_reload: {
      tag: 'link',    
      href: '/css/2.css'
    }      
  }))
  .pipe(gulp.dest(cssMain2Dest));
}


function html() {
  return gulp.src(htmlSrc)    
  .pipe(plumber())
  .pipe(htmlmin({
    collapseWhitespace: true,
    removeComments: true,
    removeScriptTypeAttributes: true,
    includeAutoGeneratedTags: false,
    ignoreCustomComments: [
      /^noindex/,
      /\/noindex+$/
    ], 
    minifyJS: false,
    minifyCSS: false,
    trimCustomFragments: true,
    //ignoreCustomFragments: [ (/\{\%[^\%]*?\%\}(\s)?/g) ],
  }))
  .pipe(liveReload.reloadPage({
    action: 'page_reload',
    partial_reload: {
      tag: 'html',    
      html: {
        force_load_images: false // Usually, images are taken from the browser cache when the HTML is partially reloaded.
      }
    }      
  }))
  .pipe(gulp.dest(htmlDest));
}


function js(){
  return gulp.src(jsSrc)
  .pipe(minifyJS()) 
  .pipe(liveReload.reloadPage({
    action: 'page_reload',
    partial_reload: {
      tag: 'script',    
      src: '/js/1.js',
      js: {
        //clear_obsolete_tags: ['style'],
        //resetHTML: false,
        use_method_1: {
          send_event_onload: true
        }        
      }
    }      
  }))
  .pipe(gulp.dest(jsDest));
}


function watch(){
  liveReload.run();
  webServer();

  // CSS
  gulp.watch(cssMain1Watch, gulp.series(cssMain1));
  gulp.watch(cssMain2Watch, gulp.series(cssMain2));

  // HTML
  gulp.watch(htmlWatch, gulp.series(html));

  // JS
  gulp.watch(jsWatch, gulp.series(js));
}


exports.cssMain1 = cssMain1;
exports.cssMain2 = cssMain2;
exports.html = html;
exports.js = js;
exports.watch = watch;
exports.start = gulp.series(cssMain1, cssMain2, html, js, watch);
